2023-08-22 12:43:23:444 grammar LogManager.java:25 before: (LEXER_GRAMMAR TSLexer_rules (RULES (RULE NL (BLOCK (ALT (? (BLOCK (ALT '\r'))) '\n'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t])))) skip))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE STRING (BLOCK (ALT 'String'))) (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE CHARACTER (BLOCK (ALT 'Character'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE IN (BLOCK (ALT 'in'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-9]))) (RULE VSTRING (BLOCK (ALT '"' (* (BLOCK (ALT .))) '"'))) (RULE VFLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (+ (BLOCK (ALT [0-9])))))) (RULE VINTEGER (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE ID (BLOCK (ALT [a-zA-Z_] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE SL_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT .))) (? (BLOCK (ALT '\r'))) '\n') (LEXER_ACTION_CALL type NL)))) (RULE ML_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip)))))
2023-08-22 12:43:23:454 grammar LogManager.java:25 after: (LEXER_GRAMMAR TSLexer_rules (RULES (RULE NL (BLOCK (ALT (? (BLOCK (ALT '\r'))) '\n'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t])))) skip))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE STRING (BLOCK (ALT 'String'))) (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE CHARACTER (BLOCK (ALT 'Character'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE IN (BLOCK (ALT 'in'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-9]))) (RULE VSTRING (BLOCK (ALT '"' (* (BLOCK (ALT .))) '"'))) (RULE VFLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (+ (BLOCK (ALT [0-9])))))) (RULE VINTEGER (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE ID (BLOCK (ALT [a-zA-Z_] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE SL_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT .))) (? (BLOCK (ALT '\r'))) '\n') (LEXER_ACTION_CALL type NL)))) (RULE ML_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip)))))
2023-08-22 12:43:24:648 grammar LogManager.java:25 load TSLexer_rules from TSParser_rules.g4
2023-08-22 12:43:24:650 grammar LogManager.java:25 before: (COMBINED_GRAMMAR TSParser_rules (import TSLexer_rules) (RULES (RULE start (BLOCK (ALT (* (BLOCK (ALT sents) (ALT NL))) EOF))) (RULE sents (BLOCK (ALT expr (+ (BLOCK (ALT NL)))))) (RULE expr (BLOCK (ALT EPSILON) (ALT expr '%' expr) (ALT expr (BLOCK (ALT '*') (ALT '/')) expr) (ALT expr (BLOCK (ALT '+') (ALT '-')) expr) (ALT '(' expr ')') (ALT expr '=' expr) (ALT VSTRING) (ALT VINTEGER) (ALT VFLOAT) (ALT ID)))))
2023-08-22 12:43:24:651 grammar LogManager.java:25 imported actions: []
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE NL (BLOCK (ALT (? (BLOCK (ALT '\r'))) '\n')))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t])))) skip)))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE VAR (BLOCK (ALT 'var')))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE LET (BLOCK (ALT 'let')))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE NIL (BLOCK (ALT 'nil')))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE TRUE (BLOCK (ALT 'true')))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE FALSE (BLOCK (ALT 'false')))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE STRING (BLOCK (ALT 'String')))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE INT (BLOCK (ALT 'Int')))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE FLOAT (BLOCK (ALT 'Float')))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE BOOL (BLOCK (ALT 'Bool')))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE CHARACTER (BLOCK (ALT 'Character')))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE IF (BLOCK (ALT 'if')))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE ELSE (BLOCK (ALT 'else')))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE SWITCH (BLOCK (ALT 'switch')))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE DEFAULT (BLOCK (ALT 'default')))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE CASE (BLOCK (ALT 'case')))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE WHILE (BLOCK (ALT 'while')))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE IN (BLOCK (ALT 'in')))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE FOR (BLOCK (ALT 'for')))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE GUARD (BLOCK (ALT 'guard')))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE CONTINUE (BLOCK (ALT 'continue')))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE BREAK (BLOCK (ALT 'break')))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE RETURN (BLOCK (ALT 'return')))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE STRUCT (BLOCK (ALT 'struct')))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE SELF (BLOCK (ALT 'self')))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE MUTATING (BLOCK (ALT 'mutating')))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE FUNC (BLOCK (ALT 'func')))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE INOUT (BLOCK (ALT 'inout')))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-9])))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE VSTRING (BLOCK (ALT '"' (* (BLOCK (ALT .))) '"')))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE VFLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (+ (BLOCK (ALT [0-9]))))))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE VINTEGER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))))))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE ID (BLOCK (ALT [a-zA-Z_] (* (BLOCK (ALT [a-zA-Z0-9_]))))))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE SL_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT .))) (? (BLOCK (ALT '\r'))) '\n') (LEXER_ACTION_CALL type NL))))
2023-08-22 12:43:24:652 grammar LogManager.java:25 imported rule: (RULE ML_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip)))
2023-08-22 12:43:24:652 grammar LogManager.java:25 Grammar: (COMBINED_GRAMMAR TSParser_rules (import TSLexer_rules) (RULES (RULE start (BLOCK (ALT (* (BLOCK (ALT sents) (ALT NL))) EOF))) (RULE sents (BLOCK (ALT expr (+ (BLOCK (ALT NL)))))) (RULE expr (BLOCK (ALT EPSILON) (ALT expr '%' expr) (ALT expr (BLOCK (ALT '*') (ALT '/')) expr) (ALT expr (BLOCK (ALT '+') (ALT '-')) expr) (ALT '(' expr ')') (ALT expr '=' expr) (ALT VSTRING) (ALT VINTEGER) (ALT VFLOAT) (ALT ID))) (RULE NL (BLOCK (ALT (? (BLOCK (ALT '\r'))) '\n'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t])))) skip))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE STRING (BLOCK (ALT 'String'))) (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE CHARACTER (BLOCK (ALT 'Character'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE IN (BLOCK (ALT 'in'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-9]))) (RULE VSTRING (BLOCK (ALT '"' (* (BLOCK (ALT .))) '"'))) (RULE VFLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (+ (BLOCK (ALT [0-9])))))) (RULE VINTEGER (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE ID (BLOCK (ALT [a-zA-Z_] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE SL_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT .))) (? (BLOCK (ALT '\r'))) '\n') (LEXER_ACTION_CALL type NL)))) (RULE ML_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip)))))
2023-08-22 12:43:24:656 grammar LogManager.java:25 after: (COMBINED_GRAMMAR TSParser_rules (import TSLexer_rules) (RULES (RULE start (BLOCK (ALT (* (BLOCK (ALT sents) (ALT NL))) EOF))) (RULE sents (BLOCK (ALT expr (+ (BLOCK (ALT NL)))))) (RULE expr (BLOCK (ALT EPSILON) (ALT expr '%' expr) (ALT expr (SET '*' '/') expr) (ALT expr (SET '+' '-') expr) (ALT '(' expr ')') (ALT expr '=' expr) (ALT VSTRING) (ALT VINTEGER) (ALT VFLOAT) (ALT ID))) (RULE NL (BLOCK (ALT (? (BLOCK (ALT '\r'))) '\n'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t])))) skip))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE STRING (BLOCK (ALT 'String'))) (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE CHARACTER (BLOCK (ALT 'Character'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE IN (BLOCK (ALT 'in'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-9]))) (RULE VSTRING (BLOCK (ALT '"' (* (BLOCK (ALT .))) '"'))) (RULE VFLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (+ (BLOCK (ALT [0-9])))))) (RULE VINTEGER (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE ID (BLOCK (ALT [a-zA-Z_] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE SL_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT .))) (? (BLOCK (ALT '\r'))) '\n') (LEXER_ACTION_CALL type NL)))) (RULE ML_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip)))))
2023-08-22 12:43:24:658 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR TSParser_rules (import TSLexer_rules) (RULES (RULE start (BLOCK (ALT (* (BLOCK (ALT sents) (ALT NL))) EOF))) (RULE sents (BLOCK (ALT expr (+ (BLOCK (ALT NL)))))) (RULE expr (BLOCK (ALT EPSILON) (ALT expr '%' expr) (ALT expr (SET '*' '/') expr) (ALT expr (SET '+' '-') expr) (ALT '(' expr ')') (ALT expr '=' expr) (ALT VSTRING) (ALT VINTEGER) (ALT VFLOAT) (ALT ID)))))
2023-08-22 12:43:24:658 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR TSParser_rulesLexer (RULES (RULE T__0 (BLOCK (ALT '%'))) (RULE T__1 (BLOCK (ALT '*'))) (RULE T__2 (BLOCK (ALT '/'))) (RULE T__3 (BLOCK (ALT '+'))) (RULE T__4 (BLOCK (ALT '-'))) (RULE T__5 (BLOCK (ALT '('))) (RULE T__6 (BLOCK (ALT ')'))) (RULE T__7 (BLOCK (ALT '='))) (RULE NL (BLOCK (ALT (? (BLOCK (ALT '\r'))) '\n'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t])))) skip))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE STRING (BLOCK (ALT 'String'))) (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE CHARACTER (BLOCK (ALT 'Character'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE IN (BLOCK (ALT 'in'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-9]))) (RULE VSTRING (BLOCK (ALT '"' (* (BLOCK (ALT .))) '"'))) (RULE VFLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (+ (BLOCK (ALT [0-9])))))) (RULE VINTEGER (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE ID (BLOCK (ALT [a-zA-Z_] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE SL_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT .))) (? (BLOCK (ALT '\r'))) '\n') (LEXER_ACTION_CALL type NL)))) (RULE ML_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip)))))
2023-08-22 12:43:25:090 left-recursion LogManager.java:25 expr
    :   ( {}  
        | '('<tokenIndex=79> expr<tokenIndex=81> ')'<tokenIndex=83> 
        | VSTRING<tokenIndex=95> 
        | VINTEGER<tokenIndex=99> 
        | VFLOAT<tokenIndex=103> 
        | ID<tokenIndex=107> 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 9)}?<p=9> '%'<tokenIndex=50> expr<tokenIndex=52,p=10>
                  | {p.Precpred(p.GetParserRuleContext(), 8)}?<p=8> ('*'<tokenIndex=59>|'/'<tokenIndex=61>)expr<tokenIndex=63,p=9>
                  | {p.Precpred(p.GetParserRuleContext(), 7)}?<p=7> ('+'<tokenIndex=70>|'-'<tokenIndex=72>) expr<tokenIndex=75,p=8>
                  | {p.Precpred(p.GetParserRuleContext(), 5)}?<p=5> '='<tokenIndex=89> expr<tokenIndex=91,p=6>
        )*
    ;
2023-08-22 12:43:25:097 grammar LogManager.java:25 added: (RULE expr (BLOCK (ALT (BLOCK (ALT {}) (ALT ('(' (ELEMENT_OPTIONS (= tokenIndex 79))) (expr (ELEMENT_OPTIONS (= tokenIndex 81))) (')' (ELEMENT_OPTIONS (= tokenIndex 83)))) (ALT (VSTRING (ELEMENT_OPTIONS (= tokenIndex 95)))) (ALT (VINTEGER (ELEMENT_OPTIONS (= tokenIndex 99)))) (ALT (VFLOAT (ELEMENT_OPTIONS (= tokenIndex 103)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 107))))) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 9)}? (ELEMENT_OPTIONS (= p 9))) ('%' (ELEMENT_OPTIONS (= tokenIndex 50))) (expr (ELEMENT_OPTIONS (= tokenIndex 52) (= p 10)))) (ALT ({p.Precpred(p.GetParserRuleContext(), 8)}? (ELEMENT_OPTIONS (= p 8))) (SET ('*' (ELEMENT_OPTIONS (= tokenIndex 59))) ('/' (ELEMENT_OPTIONS (= tokenIndex 61)))) (expr (ELEMENT_OPTIONS (= tokenIndex 63) (= p 9)))) (ALT ({p.Precpred(p.GetParserRuleContext(), 7)}? (ELEMENT_OPTIONS (= p 7))) (SET ('+' (ELEMENT_OPTIONS (= tokenIndex 70))) ('-' (ELEMENT_OPTIONS (= tokenIndex 72)))) (expr (ELEMENT_OPTIONS (= tokenIndex 75) (= p 8)))) (ALT ({p.Precpred(p.GetParserRuleContext(), 5)}? (ELEMENT_OPTIONS (= p 5))) ('=' (ELEMENT_OPTIONS (= tokenIndex 89))) (expr (ELEMENT_OPTIONS (= tokenIndex 91) (= p 6)))))))))
2023-08-22 12:43:25:098 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, NL=9, WS=10, VAR=11, LET=12, NIL=13, TRUE=14, FALSE=15, STRING=16, INT=17, FLOAT=18, BOOL=19, CHARACTER=20, IF=21, ELSE=22, SWITCH=23, DEFAULT=24, CASE=25, WHILE=26, IN=27, FOR=28, GUARD=29, CONTINUE=30, BREAK=31, RETURN=32, STRUCT=33, SELF=34, MUTATING=35, FUNC=36, INOUT=37, VSTRING=38, VFLOAT=39, VINTEGER=40, ID=41, ML_COMMENT=42}
2023-08-22 12:43:25:098 semantics LogManager.java:25 strings={'%'=1, '*'=2, '/'=3, '+'=4, '-'=5, '('=6, ')'=7, '='=8, 'var'=11, 'let'=12, 'nil'=13, 'true'=14, 'false'=15, 'String'=16, 'Int'=17, 'Float'=18, 'Bool'=19, 'Character'=20, 'if'=21, 'else'=22, 'switch'=23, 'default'=24, 'case'=25, 'while'=26, 'in'=27, 'for'=28, 'guard'=29, 'continue'=30, 'break'=31, 'return'=32, 'struct'=33, 'self'=34, 'mutating'=35, 'func'=36, 'inout'=37}
2023-08-22 12:43:25:107 LL1 LogManager.java:25 
DECISION 0 in rule start
2023-08-22 12:43:25:107 LL1 LogManager.java:25 look=[null, 9]
2023-08-22 12:43:25:107 LL1 LogManager.java:25 LL(1)? false
2023-08-22 12:43:25:107 LL1 LogManager.java:25 
DECISION 1 in rule start
2023-08-22 12:43:25:107 LL1 LogManager.java:25 look=[null, <EOF>]
2023-08-22 12:43:25:107 LL1 LogManager.java:25 LL(1)? false
2023-08-22 12:43:25:107 LL1 LogManager.java:25 
DECISION 2 in rule sents
2023-08-22 12:43:25:107 LL1 LogManager.java:25 look=[9, null]
2023-08-22 12:43:25:107 LL1 LogManager.java:25 LL(1)? false
2023-08-22 12:43:25:107 LL1 LogManager.java:25 
DECISION 3 in rule expr
2023-08-22 12:43:25:107 LL1 LogManager.java:25 look=[null, 6, 38, 40, 39, 41]
2023-08-22 12:43:25:107 LL1 LogManager.java:25 LL(1)? false
2023-08-22 12:43:25:107 LL1 LogManager.java:25 
DECISION 4 in rule expr
2023-08-22 12:43:25:107 LL1 LogManager.java:25 look=[null, null, null, null]
2023-08-22 12:43:25:107 LL1 LogManager.java:25 LL(1)? false
2023-08-22 12:43:25:107 LL1 LogManager.java:25 
DECISION 5 in rule expr
2023-08-22 12:43:25:107 LL1 LogManager.java:25 look=[null, null]
2023-08-22 12:43:25:107 LL1 LogManager.java:25 LL(1)? false
2023-08-22 12:43:25:123 action-translator LogManager.java:25 translate 
2023-08-22 12:43:25:124 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-22 12:43:25:124 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-22 12:43:25:126 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2023-08-22 12:43:25:126 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2023-08-22 12:43:25:127 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-22 12:43:25:127 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-22 12:43:25:127 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2023-08-22 12:43:25:127 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
