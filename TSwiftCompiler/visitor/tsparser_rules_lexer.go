// Code generated from TSParser_rules.g4 by ANTLR 4.13.0. DO NOT EDIT.

package TSVisitor

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type TSParser_rulesLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var TSParser_rulesLexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func tsparser_ruleslexerLexerInit() {
	staticData := &TSParser_rulesLexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.LiteralNames = []string{
		"", "'='", "'-'", "'!'", "'%'", "'*'", "'/'", "'+'", "'=='", "'!='",
		"'>'", "'<'", "'>='", "'<='", "'('", "')'", "'&&'", "'||'", "'+='",
		"'-='", "':'", "", "", "'var'", "'let'", "'nil'", "'String'", "'Int'",
		"'Float'", "'Bool'", "'Character'", "'if'", "'else'", "'switch'", "'default'",
		"'case'", "'while'", "'in'", "'for'", "'guard'", "'continue'", "'break'",
		"'return'", "'struct'", "'self'", "'mutating'", "'func'", "'inout'",
	}
	staticData.SymbolicNames = []string{
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "NL", "WS", "VAR", "LET", "NIL", "STRING", "INT", "FLOAT",
		"BOOL", "CHARACTER", "IF", "ELSE", "SWITCH", "DEFAULT", "CASE", "WHILE",
		"IN", "FOR", "GUARD", "CONTINUE", "BREAK", "RETURN", "STRUCT", "SELF",
		"MUTATING", "FUNC", "INOUT", "VBOOL", "VSTRING", "VFLOAT", "VINTEGER",
		"ID", "SL_COMMENT", "ML_COMMENT",
	}
	staticData.RuleNames = []string{
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16",
		"T__17", "T__18", "T__19", "NL", "WS", "VAR", "LET", "NIL", "STRING",
		"INT", "FLOAT", "BOOL", "CHARACTER", "IF", "ELSE", "SWITCH", "DEFAULT",
		"CASE", "WHILE", "IN", "FOR", "GUARD", "CONTINUE", "BREAK", "RETURN",
		"STRUCT", "SELF", "MUTATING", "FUNC", "INOUT", "DIGIT", "VBOOL", "VSTRING",
		"VFLOAT", "VINTEGER", "ID", "SL_COMMENT", "ML_COMMENT", "ESC",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 54, 401, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7,
		41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46,
		2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2,
		52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 1, 0, 1, 0, 1, 1,
		1, 1, 1, 2, 1, 2, 1, 3, 1, 3, 1, 4, 1, 4, 1, 5, 1, 5, 1, 6, 1, 6, 1, 7,
		1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1, 10, 1, 10, 1, 11, 1, 11, 1,
		11, 1, 12, 1, 12, 1, 12, 1, 13, 1, 13, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15,
		1, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 1, 18, 1, 18, 1, 18, 1, 19, 1,
		19, 1, 20, 3, 20, 163, 8, 20, 1, 20, 1, 20, 1, 21, 4, 21, 168, 8, 21, 11,
		21, 12, 21, 169, 1, 21, 1, 21, 1, 22, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23,
		1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 1, 25, 1,
		25, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 27,
		1, 27, 1, 27, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 29, 1, 29, 1, 29, 1,
		29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 30, 1, 30, 1, 30, 1, 31,
		1, 31, 1, 31, 1, 31, 1, 31, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1,
		32, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 34, 1, 34,
		1, 34, 1, 34, 1, 34, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 36, 1,
		36, 1, 36, 1, 37, 1, 37, 1, 37, 1, 37, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38,
		1, 38, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1,
		40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41,
		1, 41, 1, 41, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 43, 1,
		43, 1, 43, 1, 43, 1, 43, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44,
		1, 44, 1, 44, 1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 1, 46, 1, 46, 1, 46, 1,
		46, 1, 46, 1, 46, 1, 47, 1, 47, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48,
		1, 48, 1, 48, 1, 48, 3, 48, 330, 8, 48, 1, 49, 1, 49, 1, 49, 5, 49, 335,
		8, 49, 10, 49, 12, 49, 338, 9, 49, 1, 49, 1, 49, 1, 50, 4, 50, 343, 8,
		50, 11, 50, 12, 50, 344, 1, 50, 1, 50, 4, 50, 349, 8, 50, 11, 50, 12, 50,
		350, 1, 51, 4, 51, 354, 8, 51, 11, 51, 12, 51, 355, 1, 52, 1, 52, 5, 52,
		360, 8, 52, 10, 52, 12, 52, 363, 9, 52, 1, 53, 1, 53, 1, 53, 1, 53, 5,
		53, 369, 8, 53, 10, 53, 12, 53, 372, 9, 53, 1, 53, 5, 53, 375, 8, 53, 10,
		53, 12, 53, 378, 9, 53, 1, 53, 1, 53, 1, 54, 1, 54, 1, 54, 1, 54, 5, 54,
		386, 8, 54, 10, 54, 12, 54, 389, 9, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1,
		54, 1, 55, 1, 55, 1, 55, 1, 55, 3, 55, 400, 8, 55, 3, 336, 370, 387, 0,
		56, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21,
		11, 23, 12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18, 37, 19, 39,
		20, 41, 21, 43, 22, 45, 23, 47, 24, 49, 25, 51, 26, 53, 27, 55, 28, 57,
		29, 59, 30, 61, 31, 63, 32, 65, 33, 67, 34, 69, 35, 71, 36, 73, 37, 75,
		38, 77, 39, 79, 40, 81, 41, 83, 42, 85, 43, 87, 44, 89, 45, 91, 46, 93,
		47, 95, 0, 97, 48, 99, 49, 101, 50, 103, 51, 105, 52, 107, 53, 109, 54,
		111, 0, 1, 0, 5, 2, 0, 9, 9, 32, 32, 1, 0, 48, 57, 3, 0, 65, 90, 95, 95,
		97, 122, 4, 0, 48, 57, 65, 90, 95, 95, 97, 122, 2, 0, 10, 10, 13, 13, 411,
		0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0,
		0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0,
		0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0,
		0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1,
		0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0, 0, 0, 39,
		1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0, 0, 0, 0, 45, 1, 0, 0, 0, 0,
		47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1, 0, 0, 0, 0, 53, 1, 0, 0, 0,
		0, 55, 1, 0, 0, 0, 0, 57, 1, 0, 0, 0, 0, 59, 1, 0, 0, 0, 0, 61, 1, 0, 0,
		0, 0, 63, 1, 0, 0, 0, 0, 65, 1, 0, 0, 0, 0, 67, 1, 0, 0, 0, 0, 69, 1, 0,
		0, 0, 0, 71, 1, 0, 0, 0, 0, 73, 1, 0, 0, 0, 0, 75, 1, 0, 0, 0, 0, 77, 1,
		0, 0, 0, 0, 79, 1, 0, 0, 0, 0, 81, 1, 0, 0, 0, 0, 83, 1, 0, 0, 0, 0, 85,
		1, 0, 0, 0, 0, 87, 1, 0, 0, 0, 0, 89, 1, 0, 0, 0, 0, 91, 1, 0, 0, 0, 0,
		93, 1, 0, 0, 0, 0, 97, 1, 0, 0, 0, 0, 99, 1, 0, 0, 0, 0, 101, 1, 0, 0,
		0, 0, 103, 1, 0, 0, 0, 0, 105, 1, 0, 0, 0, 0, 107, 1, 0, 0, 0, 0, 109,
		1, 0, 0, 0, 1, 113, 1, 0, 0, 0, 3, 115, 1, 0, 0, 0, 5, 117, 1, 0, 0, 0,
		7, 119, 1, 0, 0, 0, 9, 121, 1, 0, 0, 0, 11, 123, 1, 0, 0, 0, 13, 125, 1,
		0, 0, 0, 15, 127, 1, 0, 0, 0, 17, 130, 1, 0, 0, 0, 19, 133, 1, 0, 0, 0,
		21, 135, 1, 0, 0, 0, 23, 137, 1, 0, 0, 0, 25, 140, 1, 0, 0, 0, 27, 143,
		1, 0, 0, 0, 29, 145, 1, 0, 0, 0, 31, 147, 1, 0, 0, 0, 33, 150, 1, 0, 0,
		0, 35, 153, 1, 0, 0, 0, 37, 156, 1, 0, 0, 0, 39, 159, 1, 0, 0, 0, 41, 162,
		1, 0, 0, 0, 43, 167, 1, 0, 0, 0, 45, 173, 1, 0, 0, 0, 47, 177, 1, 0, 0,
		0, 49, 181, 1, 0, 0, 0, 51, 185, 1, 0, 0, 0, 53, 192, 1, 0, 0, 0, 55, 196,
		1, 0, 0, 0, 57, 202, 1, 0, 0, 0, 59, 207, 1, 0, 0, 0, 61, 217, 1, 0, 0,
		0, 63, 220, 1, 0, 0, 0, 65, 225, 1, 0, 0, 0, 67, 232, 1, 0, 0, 0, 69, 240,
		1, 0, 0, 0, 71, 245, 1, 0, 0, 0, 73, 251, 1, 0, 0, 0, 75, 254, 1, 0, 0,
		0, 77, 258, 1, 0, 0, 0, 79, 264, 1, 0, 0, 0, 81, 273, 1, 0, 0, 0, 83, 279,
		1, 0, 0, 0, 85, 286, 1, 0, 0, 0, 87, 293, 1, 0, 0, 0, 89, 298, 1, 0, 0,
		0, 91, 307, 1, 0, 0, 0, 93, 312, 1, 0, 0, 0, 95, 318, 1, 0, 0, 0, 97, 329,
		1, 0, 0, 0, 99, 331, 1, 0, 0, 0, 101, 342, 1, 0, 0, 0, 103, 353, 1, 0,
		0, 0, 105, 357, 1, 0, 0, 0, 107, 364, 1, 0, 0, 0, 109, 381, 1, 0, 0, 0,
		111, 399, 1, 0, 0, 0, 113, 114, 5, 61, 0, 0, 114, 2, 1, 0, 0, 0, 115, 116,
		5, 45, 0, 0, 116, 4, 1, 0, 0, 0, 117, 118, 5, 33, 0, 0, 118, 6, 1, 0, 0,
		0, 119, 120, 5, 37, 0, 0, 120, 8, 1, 0, 0, 0, 121, 122, 5, 42, 0, 0, 122,
		10, 1, 0, 0, 0, 123, 124, 5, 47, 0, 0, 124, 12, 1, 0, 0, 0, 125, 126, 5,
		43, 0, 0, 126, 14, 1, 0, 0, 0, 127, 128, 5, 61, 0, 0, 128, 129, 5, 61,
		0, 0, 129, 16, 1, 0, 0, 0, 130, 131, 5, 33, 0, 0, 131, 132, 5, 61, 0, 0,
		132, 18, 1, 0, 0, 0, 133, 134, 5, 62, 0, 0, 134, 20, 1, 0, 0, 0, 135, 136,
		5, 60, 0, 0, 136, 22, 1, 0, 0, 0, 137, 138, 5, 62, 0, 0, 138, 139, 5, 61,
		0, 0, 139, 24, 1, 0, 0, 0, 140, 141, 5, 60, 0, 0, 141, 142, 5, 61, 0, 0,
		142, 26, 1, 0, 0, 0, 143, 144, 5, 40, 0, 0, 144, 28, 1, 0, 0, 0, 145, 146,
		5, 41, 0, 0, 146, 30, 1, 0, 0, 0, 147, 148, 5, 38, 0, 0, 148, 149, 5, 38,
		0, 0, 149, 32, 1, 0, 0, 0, 150, 151, 5, 124, 0, 0, 151, 152, 5, 124, 0,
		0, 152, 34, 1, 0, 0, 0, 153, 154, 5, 43, 0, 0, 154, 155, 5, 61, 0, 0, 155,
		36, 1, 0, 0, 0, 156, 157, 5, 45, 0, 0, 157, 158, 5, 61, 0, 0, 158, 38,
		1, 0, 0, 0, 159, 160, 5, 58, 0, 0, 160, 40, 1, 0, 0, 0, 161, 163, 5, 13,
		0, 0, 162, 161, 1, 0, 0, 0, 162, 163, 1, 0, 0, 0, 163, 164, 1, 0, 0, 0,
		164, 165, 5, 10, 0, 0, 165, 42, 1, 0, 0, 0, 166, 168, 7, 0, 0, 0, 167,
		166, 1, 0, 0, 0, 168, 169, 1, 0, 0, 0, 169, 167, 1, 0, 0, 0, 169, 170,
		1, 0, 0, 0, 170, 171, 1, 0, 0, 0, 171, 172, 6, 21, 0, 0, 172, 44, 1, 0,
		0, 0, 173, 174, 5, 118, 0, 0, 174, 175, 5, 97, 0, 0, 175, 176, 5, 114,
		0, 0, 176, 46, 1, 0, 0, 0, 177, 178, 5, 108, 0, 0, 178, 179, 5, 101, 0,
		0, 179, 180, 5, 116, 0, 0, 180, 48, 1, 0, 0, 0, 181, 182, 5, 110, 0, 0,
		182, 183, 5, 105, 0, 0, 183, 184, 5, 108, 0, 0, 184, 50, 1, 0, 0, 0, 185,
		186, 5, 83, 0, 0, 186, 187, 5, 116, 0, 0, 187, 188, 5, 114, 0, 0, 188,
		189, 5, 105, 0, 0, 189, 190, 5, 110, 0, 0, 190, 191, 5, 103, 0, 0, 191,
		52, 1, 0, 0, 0, 192, 193, 5, 73, 0, 0, 193, 194, 5, 110, 0, 0, 194, 195,
		5, 116, 0, 0, 195, 54, 1, 0, 0, 0, 196, 197, 5, 70, 0, 0, 197, 198, 5,
		108, 0, 0, 198, 199, 5, 111, 0, 0, 199, 200, 5, 97, 0, 0, 200, 201, 5,
		116, 0, 0, 201, 56, 1, 0, 0, 0, 202, 203, 5, 66, 0, 0, 203, 204, 5, 111,
		0, 0, 204, 205, 5, 111, 0, 0, 205, 206, 5, 108, 0, 0, 206, 58, 1, 0, 0,
		0, 207, 208, 5, 67, 0, 0, 208, 209, 5, 104, 0, 0, 209, 210, 5, 97, 0, 0,
		210, 211, 5, 114, 0, 0, 211, 212, 5, 97, 0, 0, 212, 213, 5, 99, 0, 0, 213,
		214, 5, 116, 0, 0, 214, 215, 5, 101, 0, 0, 215, 216, 5, 114, 0, 0, 216,
		60, 1, 0, 0, 0, 217, 218, 5, 105, 0, 0, 218, 219, 5, 102, 0, 0, 219, 62,
		1, 0, 0, 0, 220, 221, 5, 101, 0, 0, 221, 222, 5, 108, 0, 0, 222, 223, 5,
		115, 0, 0, 223, 224, 5, 101, 0, 0, 224, 64, 1, 0, 0, 0, 225, 226, 5, 115,
		0, 0, 226, 227, 5, 119, 0, 0, 227, 228, 5, 105, 0, 0, 228, 229, 5, 116,
		0, 0, 229, 230, 5, 99, 0, 0, 230, 231, 5, 104, 0, 0, 231, 66, 1, 0, 0,
		0, 232, 233, 5, 100, 0, 0, 233, 234, 5, 101, 0, 0, 234, 235, 5, 102, 0,
		0, 235, 236, 5, 97, 0, 0, 236, 237, 5, 117, 0, 0, 237, 238, 5, 108, 0,
		0, 238, 239, 5, 116, 0, 0, 239, 68, 1, 0, 0, 0, 240, 241, 5, 99, 0, 0,
		241, 242, 5, 97, 0, 0, 242, 243, 5, 115, 0, 0, 243, 244, 5, 101, 0, 0,
		244, 70, 1, 0, 0, 0, 245, 246, 5, 119, 0, 0, 246, 247, 5, 104, 0, 0, 247,
		248, 5, 105, 0, 0, 248, 249, 5, 108, 0, 0, 249, 250, 5, 101, 0, 0, 250,
		72, 1, 0, 0, 0, 251, 252, 5, 105, 0, 0, 252, 253, 5, 110, 0, 0, 253, 74,
		1, 0, 0, 0, 254, 255, 5, 102, 0, 0, 255, 256, 5, 111, 0, 0, 256, 257, 5,
		114, 0, 0, 257, 76, 1, 0, 0, 0, 258, 259, 5, 103, 0, 0, 259, 260, 5, 117,
		0, 0, 260, 261, 5, 97, 0, 0, 261, 262, 5, 114, 0, 0, 262, 263, 5, 100,
		0, 0, 263, 78, 1, 0, 0, 0, 264, 265, 5, 99, 0, 0, 265, 266, 5, 111, 0,
		0, 266, 267, 5, 110, 0, 0, 267, 268, 5, 116, 0, 0, 268, 269, 5, 105, 0,
		0, 269, 270, 5, 110, 0, 0, 270, 271, 5, 117, 0, 0, 271, 272, 5, 101, 0,
		0, 272, 80, 1, 0, 0, 0, 273, 274, 5, 98, 0, 0, 274, 275, 5, 114, 0, 0,
		275, 276, 5, 101, 0, 0, 276, 277, 5, 97, 0, 0, 277, 278, 5, 107, 0, 0,
		278, 82, 1, 0, 0, 0, 279, 280, 5, 114, 0, 0, 280, 281, 5, 101, 0, 0, 281,
		282, 5, 116, 0, 0, 282, 283, 5, 117, 0, 0, 283, 284, 5, 114, 0, 0, 284,
		285, 5, 110, 0, 0, 285, 84, 1, 0, 0, 0, 286, 287, 5, 115, 0, 0, 287, 288,
		5, 116, 0, 0, 288, 289, 5, 114, 0, 0, 289, 290, 5, 117, 0, 0, 290, 291,
		5, 99, 0, 0, 291, 292, 5, 116, 0, 0, 292, 86, 1, 0, 0, 0, 293, 294, 5,
		115, 0, 0, 294, 295, 5, 101, 0, 0, 295, 296, 5, 108, 0, 0, 296, 297, 5,
		102, 0, 0, 297, 88, 1, 0, 0, 0, 298, 299, 5, 109, 0, 0, 299, 300, 5, 117,
		0, 0, 300, 301, 5, 116, 0, 0, 301, 302, 5, 97, 0, 0, 302, 303, 5, 116,
		0, 0, 303, 304, 5, 105, 0, 0, 304, 305, 5, 110, 0, 0, 305, 306, 5, 103,
		0, 0, 306, 90, 1, 0, 0, 0, 307, 308, 5, 102, 0, 0, 308, 309, 5, 117, 0,
		0, 309, 310, 5, 110, 0, 0, 310, 311, 5, 99, 0, 0, 311, 92, 1, 0, 0, 0,
		312, 313, 5, 105, 0, 0, 313, 314, 5, 110, 0, 0, 314, 315, 5, 111, 0, 0,
		315, 316, 5, 117, 0, 0, 316, 317, 5, 116, 0, 0, 317, 94, 1, 0, 0, 0, 318,
		319, 7, 1, 0, 0, 319, 96, 1, 0, 0, 0, 320, 321, 5, 116, 0, 0, 321, 322,
		5, 114, 0, 0, 322, 323, 5, 117, 0, 0, 323, 330, 5, 101, 0, 0, 324, 325,
		5, 102, 0, 0, 325, 326, 5, 97, 0, 0, 326, 327, 5, 108, 0, 0, 327, 328,
		5, 115, 0, 0, 328, 330, 5, 101, 0, 0, 329, 320, 1, 0, 0, 0, 329, 324, 1,
		0, 0, 0, 330, 98, 1, 0, 0, 0, 331, 336, 5, 34, 0, 0, 332, 335, 3, 111,
		55, 0, 333, 335, 9, 0, 0, 0, 334, 332, 1, 0, 0, 0, 334, 333, 1, 0, 0, 0,
		335, 338, 1, 0, 0, 0, 336, 337, 1, 0, 0, 0, 336, 334, 1, 0, 0, 0, 337,
		339, 1, 0, 0, 0, 338, 336, 1, 0, 0, 0, 339, 340, 5, 34, 0, 0, 340, 100,
		1, 0, 0, 0, 341, 343, 7, 1, 0, 0, 342, 341, 1, 0, 0, 0, 343, 344, 1, 0,
		0, 0, 344, 342, 1, 0, 0, 0, 344, 345, 1, 0, 0, 0, 345, 346, 1, 0, 0, 0,
		346, 348, 5, 46, 0, 0, 347, 349, 7, 1, 0, 0, 348, 347, 1, 0, 0, 0, 349,
		350, 1, 0, 0, 0, 350, 348, 1, 0, 0, 0, 350, 351, 1, 0, 0, 0, 351, 102,
		1, 0, 0, 0, 352, 354, 7, 1, 0, 0, 353, 352, 1, 0, 0, 0, 354, 355, 1, 0,
		0, 0, 355, 353, 1, 0, 0, 0, 355, 356, 1, 0, 0, 0, 356, 104, 1, 0, 0, 0,
		357, 361, 7, 2, 0, 0, 358, 360, 7, 3, 0, 0, 359, 358, 1, 0, 0, 0, 360,
		363, 1, 0, 0, 0, 361, 359, 1, 0, 0, 0, 361, 362, 1, 0, 0, 0, 362, 106,
		1, 0, 0, 0, 363, 361, 1, 0, 0, 0, 364, 365, 5, 47, 0, 0, 365, 366, 5, 47,
		0, 0, 366, 370, 1, 0, 0, 0, 367, 369, 9, 0, 0, 0, 368, 367, 1, 0, 0, 0,
		369, 372, 1, 0, 0, 0, 370, 371, 1, 0, 0, 0, 370, 368, 1, 0, 0, 0, 371,
		376, 1, 0, 0, 0, 372, 370, 1, 0, 0, 0, 373, 375, 8, 4, 0, 0, 374, 373,
		1, 0, 0, 0, 375, 378, 1, 0, 0, 0, 376, 374, 1, 0, 0, 0, 376, 377, 1, 0,
		0, 0, 377, 379, 1, 0, 0, 0, 378, 376, 1, 0, 0, 0, 379, 380, 6, 53, 0, 0,
		380, 108, 1, 0, 0, 0, 381, 382, 5, 47, 0, 0, 382, 383, 5, 42, 0, 0, 383,
		387, 1, 0, 0, 0, 384, 386, 9, 0, 0, 0, 385, 384, 1, 0, 0, 0, 386, 389,
		1, 0, 0, 0, 387, 388, 1, 0, 0, 0, 387, 385, 1, 0, 0, 0, 388, 390, 1, 0,
		0, 0, 389, 387, 1, 0, 0, 0, 390, 391, 5, 42, 0, 0, 391, 392, 5, 47, 0,
		0, 392, 393, 1, 0, 0, 0, 393, 394, 6, 54, 0, 0, 394, 110, 1, 0, 0, 0, 395,
		396, 5, 92, 0, 0, 396, 400, 5, 34, 0, 0, 397, 398, 5, 92, 0, 0, 398, 400,
		5, 92, 0, 0, 399, 395, 1, 0, 0, 0, 399, 397, 1, 0, 0, 0, 400, 112, 1, 0,
		0, 0, 14, 0, 162, 169, 329, 334, 336, 344, 350, 355, 361, 370, 376, 387,
		399, 1, 6, 0, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// TSParser_rulesLexerInit initializes any static state used to implement TSParser_rulesLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewTSParser_rulesLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func TSParser_rulesLexerInit() {
	staticData := &TSParser_rulesLexerLexerStaticData
	staticData.once.Do(tsparser_ruleslexerLexerInit)
}

// NewTSParser_rulesLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewTSParser_rulesLexer(input antlr.CharStream) *TSParser_rulesLexer {
	TSParser_rulesLexerInit()
	l := new(TSParser_rulesLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &TSParser_rulesLexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "TSParser_rules.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// TSParser_rulesLexer tokens.
const (
	TSParser_rulesLexerT__0       = 1
	TSParser_rulesLexerT__1       = 2
	TSParser_rulesLexerT__2       = 3
	TSParser_rulesLexerT__3       = 4
	TSParser_rulesLexerT__4       = 5
	TSParser_rulesLexerT__5       = 6
	TSParser_rulesLexerT__6       = 7
	TSParser_rulesLexerT__7       = 8
	TSParser_rulesLexerT__8       = 9
	TSParser_rulesLexerT__9       = 10
	TSParser_rulesLexerT__10      = 11
	TSParser_rulesLexerT__11      = 12
	TSParser_rulesLexerT__12      = 13
	TSParser_rulesLexerT__13      = 14
	TSParser_rulesLexerT__14      = 15
	TSParser_rulesLexerT__15      = 16
	TSParser_rulesLexerT__16      = 17
	TSParser_rulesLexerT__17      = 18
	TSParser_rulesLexerT__18      = 19
	TSParser_rulesLexerT__19      = 20
	TSParser_rulesLexerNL         = 21
	TSParser_rulesLexerWS         = 22
	TSParser_rulesLexerVAR        = 23
	TSParser_rulesLexerLET        = 24
	TSParser_rulesLexerNIL        = 25
	TSParser_rulesLexerSTRING     = 26
	TSParser_rulesLexerINT        = 27
	TSParser_rulesLexerFLOAT      = 28
	TSParser_rulesLexerBOOL       = 29
	TSParser_rulesLexerCHARACTER  = 30
	TSParser_rulesLexerIF         = 31
	TSParser_rulesLexerELSE       = 32
	TSParser_rulesLexerSWITCH     = 33
	TSParser_rulesLexerDEFAULT    = 34
	TSParser_rulesLexerCASE       = 35
	TSParser_rulesLexerWHILE      = 36
	TSParser_rulesLexerIN         = 37
	TSParser_rulesLexerFOR        = 38
	TSParser_rulesLexerGUARD      = 39
	TSParser_rulesLexerCONTINUE   = 40
	TSParser_rulesLexerBREAK      = 41
	TSParser_rulesLexerRETURN     = 42
	TSParser_rulesLexerSTRUCT     = 43
	TSParser_rulesLexerSELF       = 44
	TSParser_rulesLexerMUTATING   = 45
	TSParser_rulesLexerFUNC       = 46
	TSParser_rulesLexerINOUT      = 47
	TSParser_rulesLexerVBOOL      = 48
	TSParser_rulesLexerVSTRING    = 49
	TSParser_rulesLexerVFLOAT     = 50
	TSParser_rulesLexerVINTEGER   = 51
	TSParser_rulesLexerID         = 52
	TSParser_rulesLexerSL_COMMENT = 53
	TSParser_rulesLexerML_COMMENT = 54
)
