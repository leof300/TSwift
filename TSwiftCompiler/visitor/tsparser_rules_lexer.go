// Code generated from TSParser_rules.g4 by ANTLR 4.13.0. DO NOT EDIT.

package TSVisitor

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type TSParser_rulesLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var TSParser_rulesLexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func tsparser_ruleslexerLexerInit() {
	staticData := &TSParser_rulesLexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.LiteralNames = []string{
		"", "'='", "'%'", "'*'", "'/'", "'+'", "'-'", "'('", "')'", "'+='",
		"'-='", "':'", "", "", "'var'", "'let'", "'nil'", "'String'", "'Int'",
		"'Float'", "'Bool'", "'Character'", "'if'", "'else'", "'switch'", "'default'",
		"'case'", "'while'", "'in'", "'for'", "'guard'", "'continue'", "'break'",
		"'return'", "'struct'", "'self'", "'mutating'", "'func'", "'inout'",
	}
	staticData.SymbolicNames = []string{
		"", "", "", "", "", "", "", "", "", "", "", "", "NL", "WS", "VAR", "LET",
		"NIL", "STRING", "INT", "FLOAT", "BOOL", "CHARACTER", "IF", "ELSE",
		"SWITCH", "DEFAULT", "CASE", "WHILE", "IN", "FOR", "GUARD", "CONTINUE",
		"BREAK", "RETURN", "STRUCT", "SELF", "MUTATING", "FUNC", "INOUT", "VBOOL",
		"VSTRING", "VFLOAT", "VINTEGER", "ID", "SL_COMMENT", "ML_COMMENT",
	}
	staticData.RuleNames = []string{
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
		"T__9", "T__10", "NL", "WS", "VAR", "LET", "NIL", "STRING", "INT", "FLOAT",
		"BOOL", "CHARACTER", "IF", "ELSE", "SWITCH", "DEFAULT", "CASE", "WHILE",
		"IN", "FOR", "GUARD", "CONTINUE", "BREAK", "RETURN", "STRUCT", "SELF",
		"MUTATING", "FUNC", "INOUT", "DIGIT", "VBOOL", "VSTRING", "VFLOAT",
		"VINTEGER", "ID", "SL_COMMENT", "ML_COMMENT", "ESC",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 45, 359, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7,
		41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46,
		1, 0, 1, 0, 1, 1, 1, 1, 1, 2, 1, 2, 1, 3, 1, 3, 1, 4, 1, 4, 1, 5, 1, 5,
		1, 6, 1, 6, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 1, 10, 1, 10,
		1, 11, 3, 11, 121, 8, 11, 1, 11, 1, 11, 1, 12, 4, 12, 126, 8, 12, 11, 12,
		12, 12, 127, 1, 12, 1, 12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1,
		14, 1, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16,
		1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 1, 17, 1, 18, 1, 18, 1, 18, 1, 18, 1,
		18, 1, 18, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 1, 20,
		1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 1, 22, 1,
		22, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23,
		1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1,
		25, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 27, 1, 27,
		1, 27, 1, 28, 1, 28, 1, 28, 1, 28, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1,
		29, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 31,
		1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1,
		32, 1, 32, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 34, 1, 34,
		1, 34, 1, 34, 1, 34, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1,
		35, 1, 35, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 37, 1, 37, 1, 37, 1, 37,
		1, 37, 1, 37, 1, 38, 1, 38, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1,
		39, 1, 39, 1, 39, 3, 39, 288, 8, 39, 1, 40, 1, 40, 1, 40, 5, 40, 293, 8,
		40, 10, 40, 12, 40, 296, 9, 40, 1, 40, 1, 40, 1, 41, 4, 41, 301, 8, 41,
		11, 41, 12, 41, 302, 1, 41, 1, 41, 4, 41, 307, 8, 41, 11, 41, 12, 41, 308,
		1, 42, 4, 42, 312, 8, 42, 11, 42, 12, 42, 313, 1, 43, 1, 43, 5, 43, 318,
		8, 43, 10, 43, 12, 43, 321, 9, 43, 1, 44, 1, 44, 1, 44, 1, 44, 5, 44, 327,
		8, 44, 10, 44, 12, 44, 330, 9, 44, 1, 44, 5, 44, 333, 8, 44, 10, 44, 12,
		44, 336, 9, 44, 1, 44, 1, 44, 1, 45, 1, 45, 1, 45, 1, 45, 5, 45, 344, 8,
		45, 10, 45, 12, 45, 347, 9, 45, 1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 1, 46,
		1, 46, 1, 46, 1, 46, 3, 46, 358, 8, 46, 3, 294, 328, 345, 0, 47, 1, 1,
		3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23,
		12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18, 37, 19, 39, 20, 41,
		21, 43, 22, 45, 23, 47, 24, 49, 25, 51, 26, 53, 27, 55, 28, 57, 29, 59,
		30, 61, 31, 63, 32, 65, 33, 67, 34, 69, 35, 71, 36, 73, 37, 75, 38, 77,
		0, 79, 39, 81, 40, 83, 41, 85, 42, 87, 43, 89, 44, 91, 45, 93, 0, 1, 0,
		5, 2, 0, 9, 9, 32, 32, 1, 0, 48, 57, 3, 0, 65, 90, 95, 95, 97, 122, 4,
		0, 48, 57, 65, 90, 95, 95, 97, 122, 2, 0, 10, 10, 13, 13, 369, 0, 1, 1,
		0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1,
		0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17,
		1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0,
		25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0,
		0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0,
		0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0, 0, 0, 0, 45, 1, 0, 0, 0, 0, 47, 1, 0,
		0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1, 0, 0, 0, 0, 53, 1, 0, 0, 0, 0, 55, 1,
		0, 0, 0, 0, 57, 1, 0, 0, 0, 0, 59, 1, 0, 0, 0, 0, 61, 1, 0, 0, 0, 0, 63,
		1, 0, 0, 0, 0, 65, 1, 0, 0, 0, 0, 67, 1, 0, 0, 0, 0, 69, 1, 0, 0, 0, 0,
		71, 1, 0, 0, 0, 0, 73, 1, 0, 0, 0, 0, 75, 1, 0, 0, 0, 0, 79, 1, 0, 0, 0,
		0, 81, 1, 0, 0, 0, 0, 83, 1, 0, 0, 0, 0, 85, 1, 0, 0, 0, 0, 87, 1, 0, 0,
		0, 0, 89, 1, 0, 0, 0, 0, 91, 1, 0, 0, 0, 1, 95, 1, 0, 0, 0, 3, 97, 1, 0,
		0, 0, 5, 99, 1, 0, 0, 0, 7, 101, 1, 0, 0, 0, 9, 103, 1, 0, 0, 0, 11, 105,
		1, 0, 0, 0, 13, 107, 1, 0, 0, 0, 15, 109, 1, 0, 0, 0, 17, 111, 1, 0, 0,
		0, 19, 114, 1, 0, 0, 0, 21, 117, 1, 0, 0, 0, 23, 120, 1, 0, 0, 0, 25, 125,
		1, 0, 0, 0, 27, 131, 1, 0, 0, 0, 29, 135, 1, 0, 0, 0, 31, 139, 1, 0, 0,
		0, 33, 143, 1, 0, 0, 0, 35, 150, 1, 0, 0, 0, 37, 154, 1, 0, 0, 0, 39, 160,
		1, 0, 0, 0, 41, 165, 1, 0, 0, 0, 43, 175, 1, 0, 0, 0, 45, 178, 1, 0, 0,
		0, 47, 183, 1, 0, 0, 0, 49, 190, 1, 0, 0, 0, 51, 198, 1, 0, 0, 0, 53, 203,
		1, 0, 0, 0, 55, 209, 1, 0, 0, 0, 57, 212, 1, 0, 0, 0, 59, 216, 1, 0, 0,
		0, 61, 222, 1, 0, 0, 0, 63, 231, 1, 0, 0, 0, 65, 237, 1, 0, 0, 0, 67, 244,
		1, 0, 0, 0, 69, 251, 1, 0, 0, 0, 71, 256, 1, 0, 0, 0, 73, 265, 1, 0, 0,
		0, 75, 270, 1, 0, 0, 0, 77, 276, 1, 0, 0, 0, 79, 287, 1, 0, 0, 0, 81, 289,
		1, 0, 0, 0, 83, 300, 1, 0, 0, 0, 85, 311, 1, 0, 0, 0, 87, 315, 1, 0, 0,
		0, 89, 322, 1, 0, 0, 0, 91, 339, 1, 0, 0, 0, 93, 357, 1, 0, 0, 0, 95, 96,
		5, 61, 0, 0, 96, 2, 1, 0, 0, 0, 97, 98, 5, 37, 0, 0, 98, 4, 1, 0, 0, 0,
		99, 100, 5, 42, 0, 0, 100, 6, 1, 0, 0, 0, 101, 102, 5, 47, 0, 0, 102, 8,
		1, 0, 0, 0, 103, 104, 5, 43, 0, 0, 104, 10, 1, 0, 0, 0, 105, 106, 5, 45,
		0, 0, 106, 12, 1, 0, 0, 0, 107, 108, 5, 40, 0, 0, 108, 14, 1, 0, 0, 0,
		109, 110, 5, 41, 0, 0, 110, 16, 1, 0, 0, 0, 111, 112, 5, 43, 0, 0, 112,
		113, 5, 61, 0, 0, 113, 18, 1, 0, 0, 0, 114, 115, 5, 45, 0, 0, 115, 116,
		5, 61, 0, 0, 116, 20, 1, 0, 0, 0, 117, 118, 5, 58, 0, 0, 118, 22, 1, 0,
		0, 0, 119, 121, 5, 13, 0, 0, 120, 119, 1, 0, 0, 0, 120, 121, 1, 0, 0, 0,
		121, 122, 1, 0, 0, 0, 122, 123, 5, 10, 0, 0, 123, 24, 1, 0, 0, 0, 124,
		126, 7, 0, 0, 0, 125, 124, 1, 0, 0, 0, 126, 127, 1, 0, 0, 0, 127, 125,
		1, 0, 0, 0, 127, 128, 1, 0, 0, 0, 128, 129, 1, 0, 0, 0, 129, 130, 6, 12,
		0, 0, 130, 26, 1, 0, 0, 0, 131, 132, 5, 118, 0, 0, 132, 133, 5, 97, 0,
		0, 133, 134, 5, 114, 0, 0, 134, 28, 1, 0, 0, 0, 135, 136, 5, 108, 0, 0,
		136, 137, 5, 101, 0, 0, 137, 138, 5, 116, 0, 0, 138, 30, 1, 0, 0, 0, 139,
		140, 5, 110, 0, 0, 140, 141, 5, 105, 0, 0, 141, 142, 5, 108, 0, 0, 142,
		32, 1, 0, 0, 0, 143, 144, 5, 83, 0, 0, 144, 145, 5, 116, 0, 0, 145, 146,
		5, 114, 0, 0, 146, 147, 5, 105, 0, 0, 147, 148, 5, 110, 0, 0, 148, 149,
		5, 103, 0, 0, 149, 34, 1, 0, 0, 0, 150, 151, 5, 73, 0, 0, 151, 152, 5,
		110, 0, 0, 152, 153, 5, 116, 0, 0, 153, 36, 1, 0, 0, 0, 154, 155, 5, 70,
		0, 0, 155, 156, 5, 108, 0, 0, 156, 157, 5, 111, 0, 0, 157, 158, 5, 97,
		0, 0, 158, 159, 5, 116, 0, 0, 159, 38, 1, 0, 0, 0, 160, 161, 5, 66, 0,
		0, 161, 162, 5, 111, 0, 0, 162, 163, 5, 111, 0, 0, 163, 164, 5, 108, 0,
		0, 164, 40, 1, 0, 0, 0, 165, 166, 5, 67, 0, 0, 166, 167, 5, 104, 0, 0,
		167, 168, 5, 97, 0, 0, 168, 169, 5, 114, 0, 0, 169, 170, 5, 97, 0, 0, 170,
		171, 5, 99, 0, 0, 171, 172, 5, 116, 0, 0, 172, 173, 5, 101, 0, 0, 173,
		174, 5, 114, 0, 0, 174, 42, 1, 0, 0, 0, 175, 176, 5, 105, 0, 0, 176, 177,
		5, 102, 0, 0, 177, 44, 1, 0, 0, 0, 178, 179, 5, 101, 0, 0, 179, 180, 5,
		108, 0, 0, 180, 181, 5, 115, 0, 0, 181, 182, 5, 101, 0, 0, 182, 46, 1,
		0, 0, 0, 183, 184, 5, 115, 0, 0, 184, 185, 5, 119, 0, 0, 185, 186, 5, 105,
		0, 0, 186, 187, 5, 116, 0, 0, 187, 188, 5, 99, 0, 0, 188, 189, 5, 104,
		0, 0, 189, 48, 1, 0, 0, 0, 190, 191, 5, 100, 0, 0, 191, 192, 5, 101, 0,
		0, 192, 193, 5, 102, 0, 0, 193, 194, 5, 97, 0, 0, 194, 195, 5, 117, 0,
		0, 195, 196, 5, 108, 0, 0, 196, 197, 5, 116, 0, 0, 197, 50, 1, 0, 0, 0,
		198, 199, 5, 99, 0, 0, 199, 200, 5, 97, 0, 0, 200, 201, 5, 115, 0, 0, 201,
		202, 5, 101, 0, 0, 202, 52, 1, 0, 0, 0, 203, 204, 5, 119, 0, 0, 204, 205,
		5, 104, 0, 0, 205, 206, 5, 105, 0, 0, 206, 207, 5, 108, 0, 0, 207, 208,
		5, 101, 0, 0, 208, 54, 1, 0, 0, 0, 209, 210, 5, 105, 0, 0, 210, 211, 5,
		110, 0, 0, 211, 56, 1, 0, 0, 0, 212, 213, 5, 102, 0, 0, 213, 214, 5, 111,
		0, 0, 214, 215, 5, 114, 0, 0, 215, 58, 1, 0, 0, 0, 216, 217, 5, 103, 0,
		0, 217, 218, 5, 117, 0, 0, 218, 219, 5, 97, 0, 0, 219, 220, 5, 114, 0,
		0, 220, 221, 5, 100, 0, 0, 221, 60, 1, 0, 0, 0, 222, 223, 5, 99, 0, 0,
		223, 224, 5, 111, 0, 0, 224, 225, 5, 110, 0, 0, 225, 226, 5, 116, 0, 0,
		226, 227, 5, 105, 0, 0, 227, 228, 5, 110, 0, 0, 228, 229, 5, 117, 0, 0,
		229, 230, 5, 101, 0, 0, 230, 62, 1, 0, 0, 0, 231, 232, 5, 98, 0, 0, 232,
		233, 5, 114, 0, 0, 233, 234, 5, 101, 0, 0, 234, 235, 5, 97, 0, 0, 235,
		236, 5, 107, 0, 0, 236, 64, 1, 0, 0, 0, 237, 238, 5, 114, 0, 0, 238, 239,
		5, 101, 0, 0, 239, 240, 5, 116, 0, 0, 240, 241, 5, 117, 0, 0, 241, 242,
		5, 114, 0, 0, 242, 243, 5, 110, 0, 0, 243, 66, 1, 0, 0, 0, 244, 245, 5,
		115, 0, 0, 245, 246, 5, 116, 0, 0, 246, 247, 5, 114, 0, 0, 247, 248, 5,
		117, 0, 0, 248, 249, 5, 99, 0, 0, 249, 250, 5, 116, 0, 0, 250, 68, 1, 0,
		0, 0, 251, 252, 5, 115, 0, 0, 252, 253, 5, 101, 0, 0, 253, 254, 5, 108,
		0, 0, 254, 255, 5, 102, 0, 0, 255, 70, 1, 0, 0, 0, 256, 257, 5, 109, 0,
		0, 257, 258, 5, 117, 0, 0, 258, 259, 5, 116, 0, 0, 259, 260, 5, 97, 0,
		0, 260, 261, 5, 116, 0, 0, 261, 262, 5, 105, 0, 0, 262, 263, 5, 110, 0,
		0, 263, 264, 5, 103, 0, 0, 264, 72, 1, 0, 0, 0, 265, 266, 5, 102, 0, 0,
		266, 267, 5, 117, 0, 0, 267, 268, 5, 110, 0, 0, 268, 269, 5, 99, 0, 0,
		269, 74, 1, 0, 0, 0, 270, 271, 5, 105, 0, 0, 271, 272, 5, 110, 0, 0, 272,
		273, 5, 111, 0, 0, 273, 274, 5, 117, 0, 0, 274, 275, 5, 116, 0, 0, 275,
		76, 1, 0, 0, 0, 276, 277, 7, 1, 0, 0, 277, 78, 1, 0, 0, 0, 278, 279, 5,
		116, 0, 0, 279, 280, 5, 114, 0, 0, 280, 281, 5, 117, 0, 0, 281, 288, 5,
		101, 0, 0, 282, 283, 5, 102, 0, 0, 283, 284, 5, 97, 0, 0, 284, 285, 5,
		108, 0, 0, 285, 286, 5, 115, 0, 0, 286, 288, 5, 101, 0, 0, 287, 278, 1,
		0, 0, 0, 287, 282, 1, 0, 0, 0, 288, 80, 1, 0, 0, 0, 289, 294, 5, 34, 0,
		0, 290, 293, 3, 93, 46, 0, 291, 293, 9, 0, 0, 0, 292, 290, 1, 0, 0, 0,
		292, 291, 1, 0, 0, 0, 293, 296, 1, 0, 0, 0, 294, 295, 1, 0, 0, 0, 294,
		292, 1, 0, 0, 0, 295, 297, 1, 0, 0, 0, 296, 294, 1, 0, 0, 0, 297, 298,
		5, 34, 0, 0, 298, 82, 1, 0, 0, 0, 299, 301, 7, 1, 0, 0, 300, 299, 1, 0,
		0, 0, 301, 302, 1, 0, 0, 0, 302, 300, 1, 0, 0, 0, 302, 303, 1, 0, 0, 0,
		303, 304, 1, 0, 0, 0, 304, 306, 5, 46, 0, 0, 305, 307, 7, 1, 0, 0, 306,
		305, 1, 0, 0, 0, 307, 308, 1, 0, 0, 0, 308, 306, 1, 0, 0, 0, 308, 309,
		1, 0, 0, 0, 309, 84, 1, 0, 0, 0, 310, 312, 7, 1, 0, 0, 311, 310, 1, 0,
		0, 0, 312, 313, 1, 0, 0, 0, 313, 311, 1, 0, 0, 0, 313, 314, 1, 0, 0, 0,
		314, 86, 1, 0, 0, 0, 315, 319, 7, 2, 0, 0, 316, 318, 7, 3, 0, 0, 317, 316,
		1, 0, 0, 0, 318, 321, 1, 0, 0, 0, 319, 317, 1, 0, 0, 0, 319, 320, 1, 0,
		0, 0, 320, 88, 1, 0, 0, 0, 321, 319, 1, 0, 0, 0, 322, 323, 5, 47, 0, 0,
		323, 324, 5, 47, 0, 0, 324, 328, 1, 0, 0, 0, 325, 327, 9, 0, 0, 0, 326,
		325, 1, 0, 0, 0, 327, 330, 1, 0, 0, 0, 328, 329, 1, 0, 0, 0, 328, 326,
		1, 0, 0, 0, 329, 334, 1, 0, 0, 0, 330, 328, 1, 0, 0, 0, 331, 333, 8, 4,
		0, 0, 332, 331, 1, 0, 0, 0, 333, 336, 1, 0, 0, 0, 334, 332, 1, 0, 0, 0,
		334, 335, 1, 0, 0, 0, 335, 337, 1, 0, 0, 0, 336, 334, 1, 0, 0, 0, 337,
		338, 6, 44, 0, 0, 338, 90, 1, 0, 0, 0, 339, 340, 5, 47, 0, 0, 340, 341,
		5, 42, 0, 0, 341, 345, 1, 0, 0, 0, 342, 344, 9, 0, 0, 0, 343, 342, 1, 0,
		0, 0, 344, 347, 1, 0, 0, 0, 345, 346, 1, 0, 0, 0, 345, 343, 1, 0, 0, 0,
		346, 348, 1, 0, 0, 0, 347, 345, 1, 0, 0, 0, 348, 349, 5, 42, 0, 0, 349,
		350, 5, 47, 0, 0, 350, 351, 1, 0, 0, 0, 351, 352, 6, 45, 0, 0, 352, 92,
		1, 0, 0, 0, 353, 354, 5, 92, 0, 0, 354, 358, 5, 34, 0, 0, 355, 356, 5,
		92, 0, 0, 356, 358, 5, 92, 0, 0, 357, 353, 1, 0, 0, 0, 357, 355, 1, 0,
		0, 0, 358, 94, 1, 0, 0, 0, 14, 0, 120, 127, 287, 292, 294, 302, 308, 313,
		319, 328, 334, 345, 357, 1, 6, 0, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// TSParser_rulesLexerInit initializes any static state used to implement TSParser_rulesLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewTSParser_rulesLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func TSParser_rulesLexerInit() {
	staticData := &TSParser_rulesLexerLexerStaticData
	staticData.once.Do(tsparser_ruleslexerLexerInit)
}

// NewTSParser_rulesLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewTSParser_rulesLexer(input antlr.CharStream) *TSParser_rulesLexer {
	TSParser_rulesLexerInit()
	l := new(TSParser_rulesLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &TSParser_rulesLexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "TSParser_rules.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// TSParser_rulesLexer tokens.
const (
	TSParser_rulesLexerT__0       = 1
	TSParser_rulesLexerT__1       = 2
	TSParser_rulesLexerT__2       = 3
	TSParser_rulesLexerT__3       = 4
	TSParser_rulesLexerT__4       = 5
	TSParser_rulesLexerT__5       = 6
	TSParser_rulesLexerT__6       = 7
	TSParser_rulesLexerT__7       = 8
	TSParser_rulesLexerT__8       = 9
	TSParser_rulesLexerT__9       = 10
	TSParser_rulesLexerT__10      = 11
	TSParser_rulesLexerNL         = 12
	TSParser_rulesLexerWS         = 13
	TSParser_rulesLexerVAR        = 14
	TSParser_rulesLexerLET        = 15
	TSParser_rulesLexerNIL        = 16
	TSParser_rulesLexerSTRING     = 17
	TSParser_rulesLexerINT        = 18
	TSParser_rulesLexerFLOAT      = 19
	TSParser_rulesLexerBOOL       = 20
	TSParser_rulesLexerCHARACTER  = 21
	TSParser_rulesLexerIF         = 22
	TSParser_rulesLexerELSE       = 23
	TSParser_rulesLexerSWITCH     = 24
	TSParser_rulesLexerDEFAULT    = 25
	TSParser_rulesLexerCASE       = 26
	TSParser_rulesLexerWHILE      = 27
	TSParser_rulesLexerIN         = 28
	TSParser_rulesLexerFOR        = 29
	TSParser_rulesLexerGUARD      = 30
	TSParser_rulesLexerCONTINUE   = 31
	TSParser_rulesLexerBREAK      = 32
	TSParser_rulesLexerRETURN     = 33
	TSParser_rulesLexerSTRUCT     = 34
	TSParser_rulesLexerSELF       = 35
	TSParser_rulesLexerMUTATING   = 36
	TSParser_rulesLexerFUNC       = 37
	TSParser_rulesLexerINOUT      = 38
	TSParser_rulesLexerVBOOL      = 39
	TSParser_rulesLexerVSTRING    = 40
	TSParser_rulesLexerVFLOAT     = 41
	TSParser_rulesLexerVINTEGER   = 42
	TSParser_rulesLexerID         = 43
	TSParser_rulesLexerSL_COMMENT = 44
	TSParser_rulesLexerML_COMMENT = 45
)
